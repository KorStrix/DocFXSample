# 이 워크플로는 DocFX를 빌드하고 다른 Github Repo(이 경우엔 제 Github Page 블로그)에 커밋합니다.
name: Build and Deploy DocFX

# -master 브랜치에 push가 발생했을 경우
on:
  push:
    branches:
      - master


jobs: # 잡들 선언

  build: # build Job을 선언합니다.
    runs-on: ubuntu-latest #실행 환경은 우분투의 마지막 버전으로 실행
    
    steps: # 이 잡은 이 행동(action)들을 합니다.
    - name: Checkout # 일단 이 Repo를 Checkout을 합니다.
      uses: actions/checkout@v1
    
    
    # 링크 : https://github.com/nikeee/docfx-action
    - name: Build Documentation # 그다음 바로 DocFx를 빌드합니다.
      uses: nikeee/docfx-action@v1.0.0  
      with:
        args: UnitySample/Documentation/docfx.json # 이 Repo의 해당 docFx가 있어서 인자로 넘깁니다.


    # 링크 : https://github.com/EndBug/add-and-commit
    - name: Commit Build # DocFx의 결과물을 이 Repo에 커밋합니다.
      uses: EndBug/add-and-commit@v4.4.0
#      env:
        # This is necessary in order to push a commit to the repo
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Leave this line unchanged:  

      with:
        cwd: './UnitySample/Documentation/_site/'
        force: true # 어째서인지 _site 경로가 force를 false로 하면 ignore 됩니다. 

  deploy: # deploy Job을 선언합니다.
    needs: build # build가 되면 실행됩니다.
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout # 새로운 job이기 때문에 다시 checkout을 해야 합니다.
      uses: actions/checkout@v1

    # 링크:  https://github.com/andstor/copycat-action
    - name: Copycat # 이 액션은 이 repo를 다른 repo로 커밋해주는 액션입니다. 
      uses: andstor/copycat-action@v3
      with:
        personal_token: ${{ secrets.ACCESS_TOKEN }}
        dst_owner: KorStrix
        dst_repo_name: korstrix.github.io
        src_branch: master
        src_path: /UnitySample/Documentation/_site/.
        dst_branch: master
        dst_path: /docfxsample/
        clean: true
        username: KorStrixCI
